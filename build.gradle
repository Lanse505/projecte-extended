buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = "${group}"
version = "${minecraft_version}-" + getVersion()

java {
    archivesBaseName = "${archive}"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

def version_properties = [
        "version"       : mod_version,
        "mc_version"    : minecraft_version,
        "forge_version" : forge_version,
        "loader_version": loader_version
]


// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            include '**/**'
            srcDirs += "$rootDir/src/generated/resources"
            exclude '.cache'
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/main/"
}

minecraft {
    mappings channel: "parchment", version: "${mappings_version}"
    runs {
        client {
            workingDirectory project.file('run/client')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                projecteextended {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                projecteextended {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'projecteextended', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                projecteextended {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "JEI"
        url  = 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = "Create"
        url  = "https://maven.tterrag.com/"
    }
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
        // For Gradle 5.1 and above, limit it to just AE2
        content {
            includeGroup 'appeng'
        }
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name "gigaherz's things"
        url 'https://dogforce-games.com/maven'
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name 'LDTTeam for Aequivaleo'
        url 'https://ldtteam.jfrog.io/ldtteam/modding'
    }
    flatDir {
        dirs '/libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Project-E
    implementation fg.deobf("projecte:projecte:1.0.1")

    // Applied Energistics
    implementation fg.deobf("appeng:appliedenergistics2:${ae_version}")

    // Create
    implementation fg.deobf("com.jozufozu.flywheel:Flywheel-Forge:${flywheel_version}")
    implementation fg.deobf("com.simibubi.create:Create:mc${minecraft_version}_${create_version}")

    // Elements of Power
        // EOP Deps
        runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.1-5.0.6.0")
        compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.1-5.0.6.0:api")
        compileOnly fg.deobf("com.ldtteam:aequivaleo:1.18-0.1.89-ALPHA:api")
        runtimeOnly fg.deobf("com.ldtteam:aequivaleo:1.18-0.1.89-ALPHA:universal")
        implementation fg.deobf("dev.gigaherz.guidebook:Guidebook-1.18:3.4.0")
    // EOP
    implementation fg.deobf("dev.gigaherz.elementsofpower:ElementsOfPower-${minecraft_version}:${eop_version}")

    // Farmer's Delight
    implementation fg.deobf("FarmersDelight:FarmersDelight:1.1.0")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // Soul Shards
    implementation fg.deobf("soulshards:soulshards:1.2.0")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${title}",
                "Specification-Vendor"    : "${team}",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${team}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ],)
    }
}

jar.finalizedBy('reobfJar')

String getVersion() {
    String version = "${mod_version}"
    String branch = project.hasProperty("branch") ? project.branch : ""

    if (branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if (buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "10000"
    }
}